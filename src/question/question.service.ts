import { RedisService } from '@liaoliaots/nestjs-redis';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';

import Redis from 'ioredis';
import { Repository } from 'typeorm';

import { ComponentTypeToNumber } from '@/enum/componentType.enum';
import { ErrMsg, Errno } from '@/enum/errno.enum';

import { UpdateQuestionDto } from './dto/update-question.dto';
import { Question } from './question.entity';
import { QuestionCheckbox } from './questionCheckbox.entity';
import { QuestionCheckboxOption } from './questionCheckboxOption.entity';
import { QuestionInfo } from './questionInfo.entity';
import { QuestionInput } from './questionInput.entity';
import { QuestionParagraph } from './questionParagraph.entity';
import { QuestionRadio } from './questionRadio.entity';
import { QuestionRadioOption } from './questionRadioOption.entity';
import { QuestionTextarea } from './questionTextarea.entity';
import { QuestionTitle } from './questionTitle.entity';

// type SearchOptions = {
//   keyword: string;
//   isStar: boolean;
//   isDeleted: boolean;
//   page: number;
//   pageSize: number;
// };

@Injectable()
export class QuestionService {
  private newestId = 0;

  private readonly redis: Redis;

  private readonly componentTypeToClass = {
    questionCheckbox: QuestionCheckbox,
    questionInfo: QuestionInfo,
    questionInput: QuestionInput,
    questionParagraph: QuestionParagraph,
    questionRadio: QuestionRadio,
    questionTextarea: QuestionTextarea,
    questionTitle: QuestionTitle,
  };

  constructor(
    @InjectRepository(Question) private readonly questionRepository: Repository<Question>,
    // @ts-ignore
    @InjectRepository(QuestionCheckbox) private readonly questionCheckboxRepository: Repository<QuestionCheckbox>,
    @InjectRepository(QuestionCheckboxOption)
    private readonly questionCheckboxOptionRepository: Repository<QuestionCheckboxOption>,
    // @ts-ignore
    @InjectRepository(QuestionInfo) private readonly questionInfoRepository: Repository<QuestionInfo>,
    // @ts-ignore
    @InjectRepository(QuestionInput) private readonly questionInputRepository: Repository<QuestionInput>,
    // @ts-ignore
    @InjectRepository(QuestionParagraph) private readonly questionParagraphRepository: Repository<QuestionParagraph>,
    // @ts-ignore
    @InjectRepository(QuestionRadio) private readonly questionRadioRepository: Repository<QuestionRadio>,
    @InjectRepository(QuestionRadioOption)
    private readonly questionRadioOptionRepository: Repository<QuestionRadioOption>,
    // @ts-ignore
    @InjectRepository(QuestionTextarea) private readonly questionTextareaRepository: Repository<QuestionTextarea>,
    // @ts-ignore
    @InjectRepository(QuestionTitle) private readonly questionTitleRepository: Repository<QuestionTitle>,
    private readonly redisService: RedisService,
  ) {
    this.redis = this.redisService.getClient();
  }

  // Êü•ËØ¢ÈóÆÂç∑ÂàóË°®ÔºåÊ†πÊçÆÊé•Êî∂Âà∞ÁöÑÂèÇÊï∞Êü•ËØ¢ÔºåSearchOptions
  async findAll(...searchOptions: any[]) {
    // Âè™ÈúÄË¶ÅÁâπÂÆöÂàó
    // const result= await this.questionRepository.find ({
    //   select: ['_id', 'title', 'isPublished', 'isStar', 'answerCount', 'createdAt', 'isDeleted'],
    // });
    // return {
    //   errno: Errno.SUCCESS,
    //   data: {
    //     list: result,
    //     total: result.length,
    //   },
    // };

    const queryBuilder = this.questionRepository.createQueryBuilder('question');
    queryBuilder.select([
      'question._id',
      'question.title',
      'question.isPublished',
      'question.isStar',
      'question.answerCount',
      'question.createdAt',
      'question.isDeleted',
      `COUNT (*) OVER() as total`, // Ê∑ªÂä† total Â≠óÊÆµÔºåÁî®‰∫éËøîÂõûÊï∞ÊçÆÊÄªÊï∞
    ]);
    searchOptions.forEach((searchOption) => {
      // page, ÈªòËÆ§‰∏∫ 1
      const page = searchOption.page || 1;
      // pageSize, ÈªòËÆ§‰∏∫ 10
      const pageSize = searchOption.pageSize || 10;
      // ËÆ°ÁÆóËµ∑ÂßãÁ¥¢Âºï
      const startIndex = (page - 1) * pageSize;
      // ËÆæÁΩÆ take Âíå skip
      queryBuilder.take(pageSize).skip(startIndex);
      // isDeleted, Ê≤°Êúâ‰º†ÂÄºÊó∂ÔºåÈªòËÆ§‰∏∫ false
      // arg.isDeleted ÊòØ string Á±ªÂûã
      const isDeleted = searchOption.isDeleted === 'true' || false;
      queryBuilder.andWhere('question.isDeleted= :isDeleted', { isDeleted });
      // keyword
      if (searchOption.keyword) {
        queryBuilder.andWhere('question.title like :keyword', { keyword: `%${searchOption.keyword}%` });
      }

      // isStar
      if (searchOption.isStar !== undefined) {
        // arg.isStar ÊòØ string Á±ªÂûã
        const isStar = searchOption.isStar === 'true';
        queryBuilder.andWhere('question.isStar= :isStar', { isStar });
      }
      // Ê†πÊçÆÈúÄË¶ÅÊ∑ªÂä†ÂÖ∂‰ªñÊü•ËØ¢Êù°‰ª∂
    });
    const result = await queryBuilder.getRawAndEntities();

    const list = result.entities.map((entity) => {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      const { _id, title, isPublished, isStar, answerCount, createdAt, isDeleted } = entity;
      return {
        _id,
        title,
        isPublished,
        isStar,
        answerCount,
        createdAt,
        isDeleted,
      };
    });
    const total = result.raw[0]?.total || 0;
    return {
      errno: Errno.SUCCESS,
      data: {
        list,
        total,
      },
    };
  }

  async findOne(id: number) {
    const question = await this.questionRepository.findOne({
      where: {
        _id: id,
      },
    });
    const { componentList } = question;
    console.log('üöÄ ~ file: question.service.ts:155 ~ QuestionService ~ findOne ~ componentList:', componentList);
    console.log(JSON.parse(JSON.stringify(componentList)));
    // Êï∞ÁªÑÂ≠óÁ¨¶‰∏≤ËΩ¨Êç¢ÊàêÊï∞ÁªÑ
    // const componentListObj = JSON.parse(componentList);
    // componentListObj.map(async (item) => {
    //   const {id, type} = item;
    //   const componentRepository = this[`${ComponentNumberToType[type]}Repository`];
    //   const compResult = await componentRepository.find({
    //     where: {
    //       fe_id: id,
    //     },
    //   });
    // });
    return question;
  }

  // ÁîüÊàêÊúÄÊñ∞ÂîØ‰∏Ä id ‰Ωú‰∏∫ÈóÆÂç∑ id
  // ÂÖà‰ªé mysql ‰∏≠Ëé∑ÂèñÊúÄÂ§ß id
  // ÂÜç‰ΩøÁî® redis ‰Ωú‰∏∫ËÆ°Êï∞Âô®
  // Â¶ÇÊûú redis ‰∏≠Ê≤°ÊúâËØ•ËÆ°Êï∞Âô®ÔºåÂàôÂàõÂª∫ÔºåÂê¶ÂàôËé∑Âèñ
  async getNewestId() {
    const newestId = await this.redis.get('question-newest-id');
    if (newestId) {
      this.newestId = parseInt(newestId, 10) + 1;
    } else {
      const [latestQuestion] = await this.questionRepository.find({
        order: {
          _id: 'DESC',
        },
        take: 1,
      });
      this.newestId = (latestQuestion?._id ?? -1) + 1;
    }
    await this.redis.set('question-newest-id', this.newestId.toString());
    return this.newestId;
  }

  // ‰øùÂ≠òÈóÆÂç∑
  async saveQuestion(id: number, updateQuestionDto: UpdateQuestionDto) {
    const question = await this.findOne(+id);
    const {
      title,
      description = '',
      css = '',
      js = '',
      componentList = '',
      isStar = 'false',
      isPublished = 'false',
      isDeleted = 'false',
    } = updateQuestionDto;

    // Â¶ÇÊûúÊï∞ÊçÆÂ∫ì‰∏≠Ê≤°ÊúâËØ• id Êó∂ÔºåÂàôÂàõÂª∫Êï∞ÊçÆ
    if (!question) {
      return this.createQuestion(id, title, description, css, js, componentList);
    }
    // Â¶ÇÊûúÊï∞ÊçÆÂ∫ì‰∏≠ÊúâËØ• id Êó∂ÔºåÂàôÊõ¥Êñ∞Êï∞ÊçÆ
    Object.assign(question, { title, description, css, js, isStar, isPublished, isDeleted });
    return this.updateQuestion(question, componentList);
  }

  // ÂàõÂª∫ÈóÆÂç∑
  async createQuestion(id: number, title: string, description: string, css: string, js: string, componentList: string) {
    const questionTmp = new Question();
    Object.assign(questionTmp, { _id: id, title, description, css, js });

    // componentList ËΩ¨Êç¢ÊàêÂØπË±°
    const componentListObj = JSON.parse(JSON.stringify(componentList));
    const questionComponentList = await this.createComponentList(componentListObj);
    console.log(
      'üöÄ ~ file: question.service.ts:222 ~ QuestionService ~ createQuestion ~ questionComponentList:',
      questionComponentList,
    );

    questionTmp.componentList = questionComponentList;
    const result = await this.questionRepository.save(questionTmp);

    return this.generateReturnData(result);
  }

  // ÂàõÂª∫ÈóÆÂç∑ÁªÑ‰ª∂
  async createComponentList(componentListObj: any[]) {
    return Promise.all(
      componentListObj.map(async (component) => {
        const ComponentClass = this.componentTypeToClass[component.type];
        const componentTmp = new ComponentClass();
        const { props } = component;
        // props ËΩ¨Êç¢ÊàêÂØπË±°ÔºåÁî®‰∫é‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ìÔºåË¶ÅÂä† props_
        Object.entries(props).forEach(([name, value]) => {
          return Object.assign(componentTmp, {
            [`props_${props.name}`]: value,
          });
        });
        Object.assign(componentTmp, {
          fe_id: component.fe_id,
          title: component.title,
          isHidden: component.isHidden || false,
          disabled: component.disabled || false,
        });

        if (component.type === 'questionCheckbox' || component.type === 'questionRadio') {
          const optionsTmp = await this.createOptions(component);
          componentTmp.options = optionsTmp;
        }
        const componentRepository = this[`${component.type}Repository`];
        const compResult = await componentRepository.save(componentTmp);
        return compResult.fe_id;
      }),
    );
  }

  // Êõ¥Êñ∞ÈóÆÂç∑ÁªÑ‰ª∂
  async updateComponentList(oldComponentList, componentListObj: any[]) {
    // ÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑÁªÑ‰ª∂ ID ÂàóË°®
    const newComponentIds = componentListObj.map((component) => ({
      [`${component.fe_id}`]: ComponentTypeToNumber[component.type],
    }));

    // Â∑≤ÁªèÂ≠òÂú®ÁöÑ ID ÂàóË°®ÔºånewComponentIds Â≠òÂú®‰∫é oldComponentList ‰∏≠ÁöÑÂÖÉÁ¥†
    const existComponentIds = newComponentIds.filter((item) => {
      return Object.keys(item).some((key) => {
        return oldComponentList.some((oldItem: { [x: string]: number }) => oldItem[key] === item[key]);
      });
    });

    // Ë¶ÅÂà†Èô§ÁöÑÊóßÁªÑ‰ª∂
    const deleteComponentIds = newComponentIds.filter((item) => {
      return !Object.keys(item).some((key) => {
        return oldComponentList.some((oldItem: { [x: string]: number }) => oldItem[key] === item[key]);
      });
    });

    // Âà†Èô§ÊóßÁªÑ‰ª∂
    for (const deleteId of deleteComponentIds) {
      console.log('üöÄ ~ file: question.service.ts:267 ~ QuestionService ~ updateComponentList ~ deleteId:', deleteId);
      // Ê†πÊçÆ fe_id Ëé∑Âèñ repository
      // const componentRepository = this [`${oldComponent.type}Repository`];
      // await componentRepository.remove(deleteId);
    }

    // Êõ¥Êñ∞Êñ∞ÁªÑ‰ª∂
    const updatedComponentListObj = await componentListObj.reduce(async (accPromise, component) => {
      console.log('294', component);
      const acc = await accPromise;
      const ComponentClass = this.componentTypeToClass[component.type];
      const componentTmp = new ComponentClass();
      const { props } = component;
      Object.keys(props).forEach((propName) => {
        const prefixedPropName = `props_${propName}`;
        componentTmp[prefixedPropName] = props[propName];
      });
      Object.assign(componentTmp, {
        title: component.title,
        fe_id: component.fe_id,
        typeText: component.type,
        isHidden: component.isHidden || false,
        disabled: component.disabled || false,
      });

      if (component.type === 'questionCheckbox' || component.type === 'questionRadio') {
        if (existComponentIds.includes(component.fe_id)) {
          const optionsTmp = await this.updateOptions(component);
          componentTmp.options = optionsTmp;
        } else {
          const optionsTmp = await this.createOptions(component);
          componentTmp.options = optionsTmp;
        }
      }

      acc.push(componentTmp);
      return acc;
    }, []);

    const updatedComponentList = updatedComponentListObj.map((item) => ({
      [`${item.fe_id}`]: item.type,
    }));
    // await this.questionRepository.save(updatedComponentList);
    return updatedComponentList;
  }

  // ÁªÑ‰ª∂ÈÄâÈ°πÔºåÂè™Êúâ questionCheckbox/questionRadio Êó∂ÊâçÈúÄË¶Å
  async createOptions(component) {
    console.log('üöÄ ~ file: question.service.ts:334 ~ QuestionService ~ createOptions ~ component:', component);

    return Promise.all(
      component.props.propsOptions.map(async (option) => {
        let optResult: QuestionCheckboxOption | QuestionRadioOption;
        let optionTmp;
        if (component.type === 'questionCheckbox') {
          optionTmp = new QuestionCheckboxOption();
          Object.assign(optionTmp, {
            value: option.value || '',
            text: option.text || '',
            checked: option.checked || false, // Áõ¥Êé•Âú®ËøôÈáåËÆæÁΩÆ checked Â±ûÊÄß
          });
          optResult = await this.questionCheckboxOptionRepository.save(optionTmp);
        } else if (component.type === 'questionRadio') {
          optionTmp = new QuestionRadioOption();
          Object.assign(optionTmp, {
            value: option.value || '',
            text: option.text || '',
          });
          optResult = await this.questionRadioOptionRepository.save(optionTmp);
        }

        return optResult._id;
      }),
    );
  }

  // Êõ¥Êñ∞ÈÄâÈ°πÊï∞ÊçÆ
  async updateOptions(component) {
    // Âà§Êñ≠ÈÄâÈ°πÊï∞ÊçÆÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®ÔºåÂ≠òÂú®ÂàôÊõ¥Êñ∞Ôºå‰∏çÂ≠òÂú®ÂàôÂà†Èô§
    // Ëé∑ÂèñÊóßÁöÑÈÄâÈ°πÊï∞ÊçÆ
    return Promise.all(
      component.props.propsOptions.map(async (option) => {
        let optResult: QuestionCheckboxOption | QuestionRadioOption;
        let optionTmp;
        if (component.type === 'questionCheckbox') {
          optionTmp = new QuestionCheckboxOption();
          Object.assign(optionTmp, {
            value: option.value || '',
            text: option.text || '',
            checked: option.checked || false, // Áõ¥Êé•Âú®ËøôÈáåËÆæÁΩÆ checked Â±ûÊÄß
          });
          optResult = await this.questionCheckboxOptionRepository.save(optionTmp);
        } else if (component.type === 'questionRadio') {
          optionTmp = new QuestionRadioOption();
          Object.assign(optionTmp, {
            value: option.value || '',
            text: option.text || '',
          });
          optResult = await this.questionRadioOptionRepository.save(optionTmp);
        }

        return optResult._id;
      }),
    );
  }

  // Êõ¥Êñ∞ÈóÆÂç∑
  async updateQuestion(question, componentList: string) {
    const oldComponentList = question.componentList || [];
    // componentList ËΩ¨Êç¢ÊàêÂØπË±°
    const componentListObj = JSON.parse(JSON.stringify(componentList)) || [];
    const questionComponentList = await this.updateComponentList(oldComponentList, componentListObj);
    // questionComponentList ÊòØ‰∏Ä‰∏™Êï∞Â≠óÔºåÈúÄË¶ÅËΩ¨Êç¢ÊàêÂ≠óÁ¨¶‰∏≤
    question.componentList = JSON.stringify(questionComponentList);
    const result = await this.questionRepository.save(question);
    return this.generateReturnData(result);
  }

  // ÁîüÊàêËøîÂõûÊï∞ÊçÆ
  generateReturnData(result) {
    let returnData;
    if (result['_id']) {
      returnData = {
        errno: Errno.SUCCESS,
      };
    } else {
      returnData = {
        errno: Errno.ERRNO_10,
        msg: ErrMsg[Errno.ERRNO_10],
      };
    }
    return returnData;
  }

  // Â§çÂà∂ÈóÆÂç∑
  async copy(id: number) {
    let returnData: ReturnData;
    const question = await this.findOne(id);
    if (!question) {
      returnData = {
        errno: Errno.ERRNO_12,
        msg: ErrMsg[Errno.ERRNO_12],
      };
      return returnData;
    }
    const { title, description, css, js, componentList } = question;

    const questionTmp = new Question();
    questionTmp._id = await this.getNewestId();
    questionTmp.title = title;
    questionTmp.description = description;
    questionTmp.css = css;
    questionTmp.js = js;
    questionTmp.componentList = componentList;
    const result = await this.questionRepository.save(questionTmp);
    if (result['_id']) {
      returnData = {
        errno: Errno.SUCCESS,
        data: {
          id: result['_id'],
        },
      };
      return returnData;
    }
    returnData = {
      errno: Errno.ERRNO_11,
      msg: ErrMsg[Errno.ERRNO_11],
    };
    return returnData;
  }

  /**
   * ÊâπÈáèÂà†Èô§
   * @param ids - ÈóÆÂç∑ id Êï∞ÁªÑ
   */
  removeByIds(ids: number[]) {
    return this.questionRepository.delete(ids);
  }
}
